<?xml version="1.0" ?>
<stc:meta package="spirent.core" plugin="core" version="0.0.0-0" xmlns:stc="urn:www.spirentcom.com:XMLSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<!--CreateAndReserveVirtualPortsCommand

    Create STCv ports in QManager and create and reserve associated STC Ports.

    The purpose of this command is have a sequencable STC automation command
    that can create STCv virtual port instances, and then create and attach
    associated STC Port objects.

-->
<stc:class name="CreateAndReserveVirtualPortsCommand" displayName="Create and Reserve Virtual Ports" bllDirectInterface="true" >
    <stc:attribute internalType="bool" type="core.Sequenceable" value="true"/>
    <stc:attribute internalType="string" type="framework.CommandDescription" value="Create STCv ports in QManager and create and reserve associated STC Ports"/>
    <stc:attribute internalType="string" type="framework.CommandCategory" value="Core"/>

    <!-- Input properties -->
    <stc:property category="input" name="User" displayName="VM User" type="string" default="anonymous" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Name of user creating virtual ports."/>
      <stc:stringValidation minLength="1" maxLength="256"/>
    </stc:property>

    <stc:property category="input" name="PortCount" displayName="Port Count" type="s32" default="2" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Number of virtual port instances to create"/>
      <stc:numericValidation minInclusive="1" maxInclusive="8"/>
    </stc:property>

    <stc:property category="input" name="VmImage" displayName="VM Image" type="string" default="" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Name of image file or build number.  If empty, then use the latest build on the qmanager server.  If parameter starts with '#' for example #4.50.0273, then use the STCv image for that build."/>
    </stc:property>

    <stc:property category="input" name="TtlMinutes" displayName="Minutes to Live" type="s32" default="120" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Minutes before the VM is automatically stopped.  If empty, then use qmanager default."/>
    </stc:property>

    <stc:property category="input" name="Description" displayName="VM Description" type="string" default="STCv created by STAK command" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Text to describe of VM instances"/>
    </stc:property>

    <stc:property category="input" name="UseSocket" type="bool" default="false" displayName="Connect VMs using socket" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="If True, connect VM instances with socket.  If False or empty then connect VM instances using vbridge.  Only set to True if needed for specific types of traffic."/>
    </stc:property>

    <stc:property category="input" name="VmMem" displayName="VM Memory" type="s32" default="512" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="MB of memory to allocate to each VM instance.  If zero, use qmanager default for STCv."/>
    </stc:property>

    <stc:property category="input" name="Cores" displayName="VM CPUs" type="u32" default="1" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Logical CPUs for each VM.  If zero, use qmanager default for STCv."/>
      <stc:numericValidation minInclusive="0" maxInclusive="8"/>
    </stc:property>

    <stc:property category="input" name="LicenseServer" displayName="License Server" type="string" default="" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="License server address.  If empty, use qmanager default."/>
    </stc:property>

    <stc:property category="input" name="QmServer" displayName="QManager Server URL" type="string" default="http://qmanager.cal.ci.spirentcom.com:8080" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="URL of QManager server to use for managing VM instances"/>
      <stc:stringValidation minLength="8" maxLength="1024"/>
    </stc:property>

    <!-- Output properties
         Output is given as three arrays of equal length, where the same index
         into any array corresponds to information for associated port and VM.
    -->
    <stc:property category="output" name="Ports" displayName="Virtual Port Handles" type="handle" default="" minOccurs="0" maxOccurs="unbounded">
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="List of handles for virtual ports" />
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="core.ValidHandleTypes" value="Port" />
    </stc:property>

    <stc:property category="output" name="PortLocations" displayName="Virtual Port Locations" type="string" default="" minOccurs="0" maxOccurs="unbounded">
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="List of locations of virtual ports" />
    </stc:property>

    <stc:property category="output" name="VmList" displayName="Virtual Machine IDs" type="string" default="" minOccurs="0" maxOccurs="unbounded">
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="List of VM ID values for virtual ports" />
    </stc:property>

</stc:class>

<!--DetachAndStopVirtualPortsCommand

    Detach Ports from test and stop the associated STCv ports in QManager.

    The purpose of this command is to undo the actions of the STAK command,
    CreateAndReserveVirtualPortsCommand.  Only the Ports that have an
    associated STCv instance are detached and deleted.

    This command takes no input, and is able to determine which ports have an
    associated STCv instance using the Port name.  These Port names contain a
    QManager VM ID as the first part of the name, which is used to both
    identify an STCv-associated port as well as identify the VM to stop.

-->
<stc:class name="DetachAndStopVirtualPortsCommand" displayName="Detach and Stop Virtual Ports" bllDirectInterface="true">
    <stc:attribute internalType="bool" type="core.Sequenceable" value="true"/>
    <stc:attribute internalType="string" type="framework.CommandDescription" value="Detach STC Ports from the test session and stop the associated STCv ports in QManager"/>
    <stc:attribute internalType="string" type="framework.CommandCategory" value="Core"/>

    <!-- Input properties -->
    <stc:property category="input" name="User" displayName="VM User" type="string" default="anonymous" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="Name of user who created the virtual ports."/>
      <stc:stringValidation minLength="1" maxLength="256"/>
    </stc:property>

    <stc:property category="input" name="QmServer" displayName="QManager Server URL" type="string" default="http://qmanager.cal.ci.spirentcom.com:8080" >
      <stc:attribute internalType="string" type="framework.PropertyDescription" value="URL of QManager server to use for managing VM instances"/>
      <stc:stringValidation minLength="8" maxLength="1024"/>
    </stc:property>

</stc:class>

<!--ArchiveDiagnosticLogsCommand

    Archives all BLL/Chassis/IL log files, config, etc. into a single file in tarball gzip format.

    The purpose of this command is to have an on demand method for
    gathering all the diagnostic log files for the BLL and IL and
    make them available to download to a client in a single archive file to
    submit to the support team.
-->
<stc:class
    name="ArchiveDiagnosticLogsCommand"
    displayName="Archive Diagnostic Logs"
    bllDirectInterface="false"
    isInternal="true">

    <!-- Input properties -->
    <stc:property name="FileName" default="diagnostics.tgz" type="outputFilePath" displayName="File Name" category="input"/>

</stc:class>

<!--GetChassisInfoCommand

    Returns the chassis info in JSON format.
    It will not automatically connect to the chassis, unless AutoConnect is true.
    Otherwise, there must already be an existing chassis connection with an entry under PhysicalChassisManager.
    Each chassis that has no connection will have an empty string in the
    corresponding ChassisInfoList element.
-->
<stc:class
    name="GetChassisInfoCommand"
    displayName="Get Chassis Info"
    bllDirectInterface="false"
    isInternal="true">

    <!-- Input properties -->
    <stc:property name="AddrList" type="string" default="" category="input" displayName="Chassis IP/Hostname" minOccurs="0" maxOccurs="unbounded"/>

    <stc:property name="AutoConnect" type="bool" default="false" category="input" displayName="Auto Connect"/>

    <!-- Output properties -->
    <stc:property name="ChassisInfoList" type="string" default="" category="output" displayName="Chassis Info" minOccurs="0" maxOccurs="unbounded"/>
</stc:class>

<!--GetSupportedSpeedsCommand
    Returns the supported speeds/port group sizes for the given Test module from the RCM database.
-->
<stc:class
    name="GetSupportedSpeedsCommand"
    displayName="Get Supported Speeds"
    bllDirectInterface="true"
    isInternal="true">

    <stc:enumeration name="EnumPhyType">
      <stc:enum name="LAN" value="0" displayName="LAN"/>
      <stc:enum name="ATM" value="1" displayName="ATM"/>
      <stc:enum name="POS" value="2" displayName="POS"/>
      <stc:enum name="FIBRE_CHANNEL" value="3" displayName="FIBRE_CHANNEL"/>
    </stc:enumeration>

    <!-- Input properties -->
    <stc:property name="PhyTestModule" type="handle" default="0" category="input" displayName="Physical Test Module"/>

    <!-- Optional property indicating the physical port type.
         This is only used if the module does not support supportsEnabledPortCountFeature (non-changeling)
    -->
    <stc:property name="PhyType" type="u32" default="LAN" category="input" displayName="Physical Port Type">
        <stc:enumerationRef ref="EnumPhyType"/>
    </stc:property>

    <!-- Output properties -->

    <!-- List of supported speeds, in the format <speed>:<port group size>, examples 10G:4, 40G:1 -->
    <stc:property name="SpeedInfoList" type="string" default="" category="output" displayName="Speed Info" minOccurs="1" maxOccurs="unbounded"/>
</stc:class>

<!--DownloadFeatureLicenseCommand

    Downloads feature license file from license server

    The purpose of this command is to transfer the feature license file to the BLL
    so that it can be used by the license check command during apply validation.

    The pythonVirtualenv name must match the requirements file name in order for the
    dependent packages to get installed
-->
<stc:class
    name="DownloadFeatureLicenseCommand"
    displayName="Download Feature License"
    bllDirectInterface="true"
    isInternal="true"
    pythonVirtualenv="spirent.core">

    <!-- Input properties -->
    <stc:property name="Server" displayName="License Server" type="string" default="" category="input">
        <stc:attribute type="framework.PropertyDescription" value="The license server IP or DNS name"/>
    </stc:property>
    <stc:property name="TargetFilename" displayName="Target Filename" type="outputFilePath" default="Features.lic" category="input">
        <stc:attribute type="framework.PropertyDescription" value="Download location of the feature license"/>
    </stc:property>
</stc:class>

<!--EnableUserLogsCommand

    Enables the collection of "user" logs, so they can be retrieved via the GetUserErrorLogsCommand.
    User logs are messages logged by the "user" logger which are displayed in the STC GUI.
-->
<stc:class
    name="EnableUserLogsCommand"
    displayName="Enable User Logs"
    bllDirectInterface="true"
    isInternal="true">

    <!-- Input properties -->
    <stc:property name="Enable" type="bool" default="true" category="input" displayName="Enable"/>
    <stc:property name="Limit" type="u32" default="5000" category="input" displayName="Limit"/>
</stc:class>

<!--GetUserErrorLogsCommand
    Retrieves the "user" error logs and optionally the warnings also.
    Log collection must be enabled via the EnableUserLogsCommand first.
    info and debug logs are purposefully left out since they are generally useless
    for the user, especially for Sherlock apps.
-->
<stc:class
    name="GetUserErrorLogsCommand"
    displayName="Get User Error Logs"
    bllDirectInterface="true"
    isInternal="true">

    <!-- Input properties -->
    <stc:property name="IncludeWarnings" type="bool" default="false" category="input" displayName="Include Warnings"/>

    <!-- Clear the logs -->
    <stc:property name="Clear" type="bool" default="true" category="input" displayName="Clear"/>

    <!-- Output properties -->
    <stc:property name="LogList" type="string" default="" category="output" displayName="Log List" minOccurs="0" maxOccurs="unbounded"/>
</stc:class>

<stc:class name="WaitOnScriptablesCommand" isInternal="true" bllDirectInterface="true" canCreate="false" >
    <stc:property name="ObjectList" type="handle" default="0"
                  minOccurs="0" maxOccurs="unbounded" category="input"
                  displayName="Object List">
      <stc:attribute type="framework.PropertyDescription"
                     value="Object list to wait for"
                     internalType="string"/>
      <stc:attribute type="core.ValidHandleTypes" value="Project,Port,EmulatedDevice" internalType="string" />
    </stc:property>
    <stc:property name="WaitTime" type="double" default="30.0" category="input"
       displayName="Wait Time (secs)" >
      <stc:attribute type="framework.PropertyDescription"
                     value="Amount of time in seconds to wait for."
                     internalType="string"/>
      <stc:numericValidation maxInclusive="2147483647" minInclusive="0.005"/>
    </stc:property>

    <stc:property name="Successful" type="handle" default="0"
                  minOccurs="0" maxOccurs="unbounded" category="output"
       displayName="Successful Objects" >
      <stc:attribute type="framework.PropertyDescription"
                     value="Objects that wait was successful for."
                     internalType="string"/>
    </stc:property>
    <stc:property name="Unsuccessful" type="handle" default="0"
                  minOccurs="0" maxOccurs="unbounded" category="output"
       displayName="Unsuccessful Objects" >
      <stc:attribute type="framework.PropertyDescription"
                     value="Objects that wait was unsuccessful for."
                     internalType="string"/>
    </stc:property>

</stc:class>

<!-- ReleaseObjectReferenceCommand
    Release all persistent objects stored with the Object Reference Store
    StcPythonPL interface. An optional name can target a specific key for
    removal.

    Note that this command should be used with caution. Calling it with no Key
    value will remove all Object Reference Store objects, and will affect all
    commands making use of the Object Reference Store.
-->
<stc:class
    name="ReleaseObjectReferenceCommand"
    displayName="Release Persistent Object Reference"
    bllDirectInterface="true"
    isInternal="true">

    <!-- Input properties -->
    <stc:property name="Key" type="string" default="" category="input" displayName="Key to remove from Persistent Storage (empty to remove everything)"/>
</stc:class>


</stc:meta>
