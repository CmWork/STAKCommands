from StcIntPythonPL import *


# This command deletes all StmTemplateConfig objects and the objects
# generated by them through expansion.  This is useful if the same test
# is run multiple times in the sequencer.  Saving a config has the same
# effect as deleting just the template objects as these are marked no save.
def validate(DeleteStmTemplateConfigs=True):
    return ''


def run(DeleteStmTemplateConfigs=True):
    plLogger = PLLogger.GetLogger('methodology')
    plLogger.LogDebug("run DeleteTemplatesAndGeneratedObjectsCommand")

    project = CStcSystem.Instance().GetObject("Project")
    template_list = project.GetObjects("StmTemplateConfig")
    template_mix_list = project.GetObjects("StmTemplateMix")

    # Delete generated objects
    for template in template_list:
        obj_list = template.GetObjects("Scriptable",
                                       RelationType("GeneratedObject"))
        # Note that if a port is marked for delete it appears that
        # any emulated devices that are affiliated to it
        # (the affiliationport relation) will also be deleted
        for obj in obj_list:
            # Skip the Tags object.  This will, of course, leave the
            # Tag objects around.  However, remove duplicate tags should
            # fix this.  The reasoning behind leaving the Tags around is
            # that if there are any tags created outside the scope of the
            # templates (ie port group tags), these should not be
            # deleted
            if not obj.IsTypeOf("Tags"):
                obj.MarkDelete()

    # Delete StmTemplateConfig objects
    if DeleteStmTemplateConfigs:
        for template in template_list:
            template.MarkDelete()

    # Delete the generated objects under the StmTrafficMix
    for template_mix in template_mix_list:
        template_list = template_mix.GetObjects("StmTemplateConfig")
        for template in template_list:
            obj_list = template.GetObjects("Scriptable",
                                           RelationType("GeneratedObject"))
            for obj in obj_list:
                if not obj.IsTypeOf("Tags"):
                    obj.MarkDelete()

    # Delete StmTemplateMix objects
    if DeleteStmTemplateConfigs:
        for template_mix in template_mix_list:
            template_mix.MarkDelete()

    return True


def reset():
    return True
